import React from "react";
import { StyledPrice } from "./styles";

const formatPrice = (value) => {
	const roundedPrice = Math.round(value);
	// return roundedPrice.toString().replace(/(\d)(?=(\d\d\d)+$)/, "$1 "); // форматируем строку, добвляя пробелы через каждые 3 разряда. Находим цифры, после которых есть группы из трёх цифр и заменяем их ими же самими плюс пробел. НА САМОМ ДЕЛЕ ЭТО РЕГУЛЯРКА РАБОТАЕТ ТОЛЬКО ДЛЯ СЛУЧАЯ ИЗ 4-Х ЦИФР

	return roundedPrice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " "); // этот вариант сгенерировал GPT, и работает гораздо лучше

	//   В регулярном выражении `\B(?=(\d{3})+(?!\d))`, используется `\B` для поиска мест, где не существует границы слова. Граница слова - это место, где символы составляют слово, и между ними нет пробелов или других разделителей. `\B` находит места, где символы не образуют границу слова.

	// Затем следует положительная ретроспективная проверка `(?=(\d{3})+(?!\d))`. Она используется для поиска мест, где после текущей позиции следует группа из трех цифр, за которой не следует ни одна цифра. Это гарантирует, что мы находимся в месте, где нужно вставить пробелы между разрядами числа.

	// Замена в регулярном выражении выполняется с помощью метода `replace()`. В данном случае, мы заменяем найденные места, соответствующие регулярному выражению, пробелом `' '`. Это приводит к вставке пробелов между каждыми тремя цифрами начиная с конца числа.

	// Например, если у нас есть число `1234567890`, регулярное выражение найдет места, где нужно вставить пробелы: после `1`, после `234`, после `567` и после `890`. Затем метод `replace()` заменит эти места пробелами, и мы получим отформатированную строку `'1 234 567 890'`.
};

// Отформатированная цена
function Price({ value, className }) {
	return (
		<StyledPrice className={className}>{formatPrice(value)} руб.</StyledPrice>
	);
}

export default Price;
